<% layout("/layouts/boilerplate") %>
<style>
  .outerChat {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .chatOuterBoundry {
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 50rem; /* 25rem */
    height: 37.6rem; /* 33rem */
    border: 1px solid black;
    border-radius: 1rem;
    background-color: azure;
  }

  .chatUser {
    width: 100%;
    display: flex;
    font-size: small;
    padding: 0.4rem 0.7rem;
    height: 5rem;
  }
  .homeBtn {
    margin-left: auto;
  }
  .btn-warning:hover {
    border: 2px solid #1876f2;
  }

  /*  .chatUser img {
    width: 8%;
    height: 4rem;
    border-radius: 50%;
    margin-right: 0.6rem;
    position: relative;
    bottom: 0.2rem;
  } */
  .chatUser img:hover {
    cursor: pointer;
  }
  .chatUser i {
    position: relative;
    font-size: medium;
    top: 0.8rem;
    margin-left: 28.5rem;
  }

  .newInfo h6 {
    margin-bottom: 1px;
  }
  .newInfo h6:hover {
    cursor: pointer;
  }

  .newInfo p {
    opacity: 0.7;
    margin-bottom: 0;
    font-size: small;
  }
  .chatUser {
    display: flex;
    justify-self: flex-start;
    align-items: center;
    background-color: aqua;
    border-radius: 1rem 1rem 0 0;
    color: rgb(0, 0, 0);
    border-bottom: 1px solid black;
    margin-bottom: 0.5rem;
  }
  .typeMsg {
    width: 100%;
    height: fit-content;
    background-color: aqua;
    align-items: center;
    border-radius: 1rem;
    margin-top: auto;
    display: flex;
    align-items: center;
    padding: 0.3rem;
    border-top: 1px solid black;
  }

  .typeMsg input {
    display: inline;
    border-radius: 1rem;
    width: 46.8rem; /* 22rem */
    width: 100%;
    margin-right: 0.5rem;
  }
  .subBtn {
    margin-right: 0.5rem;
  }
  .sendBtn:hover {
    scale: 1.1;
  }
  .sendMsg,
  .recMsg {
    height: fit-content;
    min-width: 30%;
    max-width: 65%;
    background-color: rgb(0, 255, 255);
    border-radius: 1rem;
    border-bottom: 1px solid black;
    border-left: 1px solid black;
    border-right: 1px solid black;
    margin-bottom: 0.5rem;
  }

  .recMsg {
    align-self: flex-start;
  }
  .sendMsg {
    align-self: flex-end;
  }
  .recInnerMsg {
    margin-left: 0;
    width: 100%;
    max-height: 18rem;
    overflow-y: scroll;
    overflow-wrap: break-word;
    background-color: white;
    border: 1px solid black;
    border-radius: 1rem;
    padding: 0.5rem;
  }
  .sendInnerMsg {
    width: 100%;
    max-height: 18rem;
    overflow-y: scroll;
    overflow-wrap: break-word;
    background-color: antiquewhite;
    border: 1px solid black;
    border-radius: 1rem;
    padding: 0.5rem;
  }

  .recInnerMsg img,
  .sendInnerMsg img {
    width: 100%;
    height: 100%;
  }
  .messages {
    height: 100%;
    overflow-y: auto;
    width: 100%;
    display: flex;
    flex-direction: column;
  }

  .AllUsers {
    width: 35%;
    height: 37.6rem;
    background-color: white;
    margin-left: 1rem;
    margin-right: 1rem;
    border: 1px solid black;
    border-radius: 1rem;
  }
  .userHeader {
    width: 100%;
    height: 4rem;
    border-bottom: 1px solid black;
    border-radius: 1rem 1rem 0 0;
    background-color: aqua;
    display: flex;
    align-items: center;
    position: sticky; /* Make the header sticky */
    top: 0; /* Stick to the top of the viewport */
    z-index: 1; /* Ensure it stays above other elements */
  }

  .userInfo {
    width: 100%;
    height: 4rem;
    display: flex;
    font-size: small;
    padding: 0.4rem 0.7rem;
    background-color: white;
    border-bottom: 1px solid black;
  }

  .userInfo:hover {
    background-color: rgb(205, 255, 255);
    cursor: pointer;
  }
  /*   .userInfo img {
    width: 8%;
    height: 100%;
    border-radius: 50%;
    margin-right: 0.6rem;
    position: relative;
    bottom: 0.2rem;
  } */

  .userInfo i {
    position: relative;
    left: 25rem;
    align-self: center;
    font-size: medium;
  }

  .info h6 {
    margin-bottom: 1px;
  }

  .info p {
    opacity: 0.7;
    margin-bottom: 0;
  }
  .userInfo {
    align-items: center;
  }
  .allchatUsers {
    overflow-y: auto;
    height: calc(100% - 5rem); /* Adjust the height to fill remaining space */
  }
  .sendMsgOptions {
    display: flex;
    align-items: center;
    justify-content: space-between;
    width: 100%;
  }

  /* Default styles for large screens */
  .date-format-small {
    display: none;
  }
  /* Media query for small screens (up to 412px) */
  @media only screen and (max-width: 435px) {
    .date-format-large {
      display: none;
    }

    .date-format-small {
      display: block;
      /* Add your small screen styles here if needed */
    }
    .sendMsg,
    .recMsg {
      min-width: 45%;
      max-width: 85%;
    }
  }

  .icon {
    cursor: pointer;
    /* Add your icon styles or any additional styling here */
  }
  .icon i:hover {
    scale: 1.1;
  }
  .inpOutr {
    width: 90%;
  }
  #imagePreview {
    width: fit-content;
  }
  #imagePreview img {
    width: 15rem;
    height: 8rem;
    border-radius: 1rem;
    margin-bottom: 0.5rem;
  }
  /* Initially hide the delete button */
  .deleteBtn {
    display: none;
    width: 100%;
    height: fit-content;
    border-radius: 1rem;
    background-color: aliceblue;
    border: 1px solid black;
    text-align: center;
  }
  .deleteBtn button {
    border: none;
    width: 100%;
    background-color: aliceblue;
    border-radius: 1rem;
  }
  .deleteBtn button:hover {
    color: yellow;
    background-color: rgb(255, 1, 1);
  }

  .deleteBtn.active {
    display: block;
  }

  .Eicon:hover {
    cursor: pointer;
  }
  #backBtn:hover {
    scale: 1.1;
  }
  @media screen and (max-width: 767px) {
    /* Styles for screens with a maximum width of 767 pixels */
    div#chatOptions {
      position: absolute;
      top: 10%;
      right: 8%;
    }
    .AllUsers {
      display: none;
    }

    .typeMsg input {
      display: inline;
      border-radius: 1rem;
      margin-right: 1rem;
      width: 100%;
    }
    .inpOutr {
      width: 80%;
    }
    .chatUser {
      width: 100%;
      display: flex;
      align-items: center;
      font-size: small;
      padding: 0.4rem 0.7rem;
      height: 4rem;
    }
    .chatUser img {
      width: 55px;
      height: 55px;
      border-radius: 50%;
      margin-right: 0.6rem;
      position: relative;
    }
    .chatUser {
      position: fixed;
      border-radius: 0;
      border-top: 1px solid black;
    }
    .outerChat {
      height: 100%;
    }
    .chatOuterBoundry {
      width: 95%;
      /* height: 86.3vh; */
      height: 90vh;

      width: 100%;
      height: 100%;
      border: none;
    }
    .messages {
      height: 100vh;
      margin-top: 5rem;
    }
  }

  .profile-container {
    position: relative;
    display: inline-block;
  }
  .profile-image {
    width: 65px; /* Adjust the size as needed */
    height: 65px; /* Adjust the size as needed */
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #ffffff; /* Border color for the image */
    margin-right: 0.6rem;
  }

  .user-profile-image {
    width: 50px; /* Adjust the size as needed */
    height: 50px; /* Adjust the size as needed */
    border-radius: 50%;
    object-fit: cover;
    border: 2px solid #ffffff; /* Border color for the image */
    margin-right: 0.6rem;
  }

  .online-indicator {
    position: absolute;
    top: 0;
    left: 0;
    width: 15px;
    height: 15px;
    background-color: #2ecc71; /* Green color for online indicator */
    border-radius: 50%;
    border: 2px solid #fff; /* Border color for the indicator */
  }
  .offline-indicator {
    position: absolute;
    top: 0;
    left: 0;
    width: 15px;
    height: 15px;
    background-color: #cecdcd; /* Green color for online indicator */
    border-radius: 50%;
    border: 2px solid #fff; /* Border color for the indicator */
  }
  .chat-online {
    padding-left: 5px;
    padding-right: 5px;
    text-align: center;
    border: 1px solid black;
    background-color: greenyellow;
    border-radius: 1rem;
  }
  .chat-offline {
    padding-left: 5px;
    padding-right: 5px;
    text-align: center;
    border: 1px solid black;
    background-color: rgb(214, 211, 211);
    border-radius: 1rem;
  }

  #progressBar {
    position: relative;
    height: 10px;
    width: 70%;
    border: 10px solid #f4a261;
    border-radius: 15px;
    margin-bottom: 1rem;
    display: none;
  }
  #progressBar .BarColor {
    position: relative;
    bottom: 4px;
    background-color: #ffffff;
    width: 0px;
    height: 10px;
    border-radius: 15px;
    animation: progres 2s infinite linear;
  }
  @keyframes progres {
    0% {
      width: 0%;
    }
    25% {
      width: 50%;
    }
    50% {
      width: 75%;
    }
    75% {
      width: 85%;
    }
    100% {
      width: 100%;
    }
  }

  #optionsBtn:hover {
    cursor: pointer;
  }
  #chatOptions {
    display: none;
    background-color: cyan;
    position: absolute;
    top: 6rem;
    right: 7.2rem;
    top: 15%;
    right: 7.2%;
    border-radius: 1rem;
    height: fit-content;
    border: 1px solid black;
  }
  #chatOptions li:hover {
    background-color: red;
    color: yellow;
    cursor: pointer;
  }
</style>

<style>
  .overlay {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5); /* Semi-transparent black overlay */
    justify-content: center;
    align-items: center;
    z-index: 1000;
  }

  .del-cnf {
    background-color: white;
    padding: 20px;
    border-radius: 8px;
    z-index: 1001; /* Place the form above the overlay */
    height: fit-content;
  }

  /* Style your form elements as needed */
  .del-cnf label {
    display: block;
    margin-bottom: 8px;
  }

  /* .del-cnf input {
    width: 100%;
    padding: 8px;
    margin-bottom: 12px;
    border-radius: 1rem;
  } */

  .del-cnf .nbtn {
    background-color: #fefefe;
    color: rgb(0, 0, 0);
    border: 2px solid black !important;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    border-radius: 1rem;
  }
  .del-cnf .nbtn:hover {
    background-color: red;
    color: white;
  }
  .windowCloseBtn {
    background-color: #1876f2;
    color: rgb(255, 255, 255);
    border: 2px solid black !important;
    padding: 10px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    border-radius: 1rem;
  }
  .windowCloseBtn:hover {
    background-color: greenyellow;
    color: black;
  }
</style>
<body>
  <!-- delete cnf page -->
  <div class="overlay" id="delCnfOverlay">
    <div class="del-cnf">
      <h2>
        Delete Confirmation !!! <br />
        For the Msg Dated
      </h2>
      <h2 style="display: none" id="msg_id"></h2>
      <h2 style="display: none" id="msg_type"></h2>
      <h2 style="display: none" id="isImg"></h2>
      <h2 style="display: none" id="imgURL"></h2>

      <h3 style="color: red" id="time"></h3>
      <!-- Include your actual signup form here -->
      <form id="cnfForm" style="width: 100%" action=""></form>
      <% let delTypeE = "delTypeE"; let currUser_id = currUser._id; let
      chatUser_id = chatUser._id; %>
      <button
        onclick="submitDelBtn('<%=currUser_id%>','<%=chatUser_id%>','<%=delTypeE%>')"
        class="nbtn delBtn"
        id="delForE"
      >
        Delete For Everyone
      </button>
      <% let delTypeM = "delTypeM"%>
      <button
        onclick="submitDelBtn('<%=currUser_id%>','<%=chatUser_id%>','<%=delTypeM%>')"
        class="nbtn delBtn"
      >
        Delete For Me
      </button>
      <button class="windowCloseBtn delBtn" onclick="closeDelCnf()">
        Close
      </button>
    </div>
  </div>
  <div class="outerChat">
    <div class="AllUsers">
      <div class="userHeader">
        <h4 style="margin-left: 1rem">Chats</h4>
      </div>

      <div class="allchatUsers">
        <% for (user of allUsers) { %>
        <a
          href="/chatWindow/<%= user._id %>"
          style="text-decoration: none; color: black"
        >
          <div class="userInfo">
            <div class="profile-container">
              <img
                class="user-profile-image"
                src="<%= user.image.url %>"
                alt="User Profile"
              />
              <% if(user.is_online) { %>
              <div
                class="online-indicator"
                id="<%= user._id %>-usersArray"
              ></div>
              <% }else{ %>
              <div
                class="offline-indicator"
                id="<%= user._id %>-usersArray"
              ></div>
              <% } %>
            </div>
            <div class="info">
              <h6>
                <%= user.username %><%= currUser && user._id.toString() ===
                currUser._id.toString() ? " (You)" : "" %>
              </h6>
              <!-- time -->

              <% if(user.latestMsg){ %>
              <p id="<%= user._id %>-latestMsg">
                Last Msg: <%= luxon.DateTime.fromJSDate(new
                Date(user.latestMsg), { zone: 'Asia/Kolkata' })
                .toLocaleString({ weekday: 'short', month: 'short', day:
                'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric',
                second: 'numeric', hour12: true }) %>
              </p>
              <% } else { %>
              <p id="<%= user._id  %>-latestMsg">Last Msg: No messages</p>
              <% }%>
            </div>
          </div>
        </a>
        <% } %>
      </div>
    </div>
    <div class="chatOuterBoundry" id="chatOuterBoundry">
      <% if(chatUser){ %>
      <div class="chatUser">
        <!-- userimage -->
        <div>
          <a href="/chatWindow" style="text-decoration: none; color: black"
            ><i
              id="backBtn"
              style="
                margin: auto;
                font-size: x-large;
                margin-bottom: 20px;
                margin-right: 10px;
              "
              class="fa-solid fa-arrow-left"
            ></i
          ></a>
        </div>
        <div class="profile-container">
          <img
            class="profile-image"
            src="<%= chatUser.image.url %>"
            alt="User Profile"
          />
          <% if(chatUser.is_online) { %>
          <div class="online-indicator" id="<%= chatUser._id %>-chatUser"></div>
          <% }else{ %>
          <div
            class="offline-indicator"
            id="<%= chatUser._id %>-chatUser"
          ></div>
          <% } %>
        </div>

        <div class="newInfo">
          <h6><%= chatUser.username %></h6>
          <div style="display: flex">
            <p style="margin-right: 5px">Public</p>
            <% if(chatUser.is_online) {%>
            <div class="chat-online" id="<%= chatUser._id %>">
              <p id="<%= chatUser._id %>-text" style="color: black">
                <b>online</b>
              </p>
            </div>
            <% }else { %>
            <div class="chat-offline" id="<%= chatUser._id %>">
              <p id="<%= chatUser._id %>-text" style="color: black">
                <b>Offline</b>
              </p>
            </div>
            <% } %>
          </div>
        </div>
        <div
          id="optionsBtn"
          onclick="openChatOpt()"
          onmouseenter="openChatOpt()"
          style="margin-left: auto"
        >
          <i
            style="
              margin: auto;
              font-size: x-large;
              margin-bottom: 20px;
              margin-right: 10px;
            "
            class="fa-solid fa-ellipsis-vertical"
          ></i>
        </div>
      </div>

      <div id="chatOptions">
        <form
          id="deleteMsgsForm"
          action="/deleteAllMsgs/<%=currUser._id %>/<%= chatUser._id %>"
          style="text-decoration: none"
        >
          <ul class="list-group">
            <button
              style="border: 1px solid black; border-radius: 1rem"
              type="submit"
            >
              <li class="list-group-item">Clear Chat</li>
            </button>
          </ul>
        </form>
      </div>

      <% if(chatUser ) {%> <% if(currUser && chatUser._id.toString() ===
      currUser._id.toString()) {%>
      <div class="messages">
        <!-- mesges -->
        <% sortedSelfMsgs.forEach(msg => { %> <%if(msg.isDeleted){%>
        <div class="sendMsg" id="<%=msg.id %>">
          <div class="recInnerMsg" style="background-color: rgb(215, 213, 213)">
            <p style="margin-bottom: 0">
              <i class="fa-regular fa-circle-xmark"></i> This Message Was
              Deleted
            </p>
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
            <p
              id="dateLarge"
              class="date-format-large"
              style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
            >
              <%= luxon.DateTime.fromJSDate(new Date(msg.createdAt), { zone:
              'Asia/Kolkata' }).toLocaleString({ weekday: 'short', month:
              'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute:
              'numeric', second: 'numeric', hour12: true }) %>
            </p>
            <p
              id="dateSmall"
              class="date-format-small"
              style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
            >
              <%= luxon.DateTime.fromJSDate(new Date(msg.createdAt), { zone:
              'Asia/Kolkata' }).toLocaleString({ day: 'numeric', month:
              'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric',
              hour12: true }) %>
            </p>
            <!-- Ellipsis icon -->
            <div
              class="Eicon"
              onclick="openDelBTN('<%= msg.id %>-icon')"
              style="width: 10%; text-align: center"
            >
              <i class="fa-solid fa-caret-down"></i>
            </div>
          </div>
          <div class="deleteBtn" id="<%= msg.id %>-icon">
            <%let currUser_id = currUser._id ; let chatUser_id = chatUser._id;
            msgType = "sendMsg"; let time = msg.createdAt; let msg_id = msg.id;
            let isDeleted = msg.isDeleted; let isImage = msg.isImage; let imgURL
            = msg.img; %>
            <button
              onclick="openDelCnf('<%=currUser_id %>','<%=chatUser_id%>','<%=time%>','<%=msgType%>','<%=msg_id%>','<%=isDeleted%>','<%=isImage%>','<%=imgURL%>')"
            >
              Delete
            </button>
          </div>
        </div>
        <%} else{ %>
        <div class="sendMsg" id="<%=msg.id %>">
          <div class="recInnerMsg">
            <% if(msg.img){%>
            <img src="<%= msg.img %>" alt="" />
            <%} else{%>
            <p style="margin-bottom: 0"><%= msg.msg %></p>
            <%}%>
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
            <p
              id="dateLarge"
              class="date-format-large"
              style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
            >
              <%= luxon.DateTime.fromJSDate(new Date(msg.createdAt), { zone:
              'Asia/Kolkata' }).toLocaleString({ weekday: 'short', month:
              'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute:
              'numeric', second: 'numeric', hour12: true }) %>
            </p>
            <p
              id="dateSmall"
              class="date-format-small"
              style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
            >
              <%= luxon.DateTime.fromJSDate(new Date(msg.createdAt), { zone:
              'Asia/Kolkata' }).toLocaleString({ day: 'numeric', month:
              'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric',
              hour12: true }) %>
            </p>
            <!-- Ellipsis icon -->
            <div
              class="Eicon"
              onclick="openDelBTN('<%= msg.id %>-icon')"
              style="width: 10%; text-align: center"
            >
              <i class="fa-solid fa-caret-down"></i>
            </div>
          </div>
          <div class="deleteBtn" id="<%= msg.id %>-icon">
            <%let currUser_id = currUser._id ; let chatUser_id = chatUser._id;
            msgType = "sendMsg"; let time = msg.createdAt; let msg_id = msg.id;
            let isDeleted = msg.isDeleted; let isImage = msg.isImage; let imgURL
            = msg.img; %>
            <button
              onclick="openDelCnf('<%=currUser_id %>','<%=chatUser_id%>','<%=time%>','<%=msgType%>','<%=msg_id%>','<%=isDeleted%>','<%=isImage%>','<%=imgURL%>')"
            >
              Delete
            </button>
          </div>
        </div>

        <%}%> <% }); %>
        <div id="defaultSection"></div>
      </div>
      <center>
        <form
          method="post"
          action="/saveImg/<%=chatUser._id %>"
          id="priviewForm"
          enctype="multipart/form-data"
        >
          <div id="imagePreview">
            <!-- The input element with a unique id -->
            <input
              type="file"
              id="fileInput"
              name="chatImg"
              style="display: none"
              accept="image/*"
            />
            <div id="imgOfPreview">
              <div style="display: none" class="invalid-feedback" id="imageNot">
                Please Select Image File!
                <i class="fa-solid fa-xmark"></i>
              </div>
            </div>
          </div>
          <div id="previewBottom"></div>
        </form>
        <div id="progressBar">
          <div class="BarColor">Loading...</div>
        </div>
      </center>
      <% } else{ %>
      <div class="messages">
        <!-- mesges -->
        <% sortedMsgs.forEach(msg => { if( msg.type === 'recMsg' || msg.type ===
        'sendMsg') { %> <%if(msg.isDeleted){%>
        <div class="<%= msg.type %>" id="<%=msg.id %>">
          <div
            style="background-color: rgb(215, 213, 213)"
            class="<%= msg.type === 'recMsg' ? 'recInnerMsg' : 'sendInnerMsg' %>"
          >
            <p style="margin-bottom: 0">
              <i class="fa-regular fa-circle-xmark"></i> This Message Was
              Deleted
            </p>
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
            <p
              id="dateLarge"
              class="date-format-large"
              style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
            >
              <%= luxon.DateTime.fromJSDate(new Date(msg.createdAt), { zone:
              'Asia/Kolkata' }).toLocaleString({ weekday: 'short', month:
              'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute:
              'numeric', second: 'numeric', hour12: true }) %>
            </p>
            <p
              id="dateSmall"
              class="date-format-small"
              style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
            >
              <%= luxon.DateTime.fromJSDate(new Date(msg.createdAt), { zone:
              'Asia/Kolkata' }).toLocaleString({ day: 'numeric', month:
              'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric',
              hour12: true }) %>
            </p>
            <!-- Ellipsis icon -->
            <div
              class="Eicon"
              onclick="openDelBTN('<%= msg.id %>-icon')"
              style="width: 10%; text-align: center"
            >
              <i class="fa-solid fa-caret-down"></i>
            </div>
          </div>
          <div class="deleteBtn" id="<%= msg.id %>-icon">
            <%let currUser_id = currUser._id ; let chatUser_id = chatUser._id;
            let msgType = msg.type; let time = msg.createdAt; let msg_id =
            msg.id; let isDeleted = msg.isDeleted; let isImage = msg.isImage;
            let imgURL = msg.img; %>
            <button
              onclick="openDelCnf('<%=currUser_id %>','<%=chatUser_id%>','<%=time%>','<%=msgType%>','<%=msg_id%>','<%=isDeleted%>','<%=isImage%>','<%=imgURL%>')"
            >
              Delete
            </button>
          </div>
        </div>
        <%} else{ %>
        <div class="<%= msg.type %>" id="<%=msg.id %>">
          <div
            class="<%= msg.type === 'recMsg' ? 'recInnerMsg' : 'sendInnerMsg' %>"
          >
            <% if(msg.img){%>
            <img src="<%=msg.img %>" alt="" />
            <%} else{%>
            <p style="margin-bottom: 0"><%= msg.msg %></p>
            <%}%>
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
            <p
              id="dateLarge"
              class="date-format-large"
              style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
            >
              <%= luxon.DateTime.fromJSDate(new Date(msg.createdAt), { zone:
              'Asia/Kolkata' }).toLocaleString({ weekday: 'short', month:
              'short', day: 'numeric', year: 'numeric', hour: 'numeric', minute:
              'numeric', second: 'numeric', hour12: true }) %>
            </p>
            <p
              id="dateSmall"
              class="date-format-small"
              style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
            >
              <%= luxon.DateTime.fromJSDate(new Date(msg.createdAt), { zone:
              'Asia/Kolkata' }).toLocaleString({ day: 'numeric', month:
              'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric',
              hour12: true }) %>
            </p>
            <!-- Ellipsis icon -->
            <div
              class="Eicon"
              onclick="openDelBTN('<%= msg.id %>-icon')"
              style="width: 10%; text-align: center"
            >
              <i class="fa-solid fa-caret-down"></i>
            </div>
          </div>
          <div class="deleteBtn" id="<%= msg.id %>-icon">
            <%let currUser_id = currUser._id ; let chatUser_id = chatUser._id;
            let msgType = msg.type; let time = msg.createdAt; let msg_id =
            msg.id; let isDeleted = msg.isDeleted; let isImage = msg.isImage;
            let imgURL = msg.img; %>
            <button
              onclick="openDelCnf('<%=currUser_id %>','<%=chatUser_id%>','<%=time%>','<%=msgType%>','<%=msg_id%>','<%=isDeleted%>','<%=isImage%>','<%=imgURL%>')"
            >
              Delete
            </button>
          </div>
        </div>
        <%}%> <% } }); %>

        <div id="defaultSection"></div>
      </div>
      <center>
        <form
          method="post"
          action="/saveImg/<%=chatUser._id %>"
          id="priviewForm"
          enctype="multipart/form-data"
        >
          <div id="imagePreview">
            <!-- The input element with a unique id -->
            <input
              type="file"
              id="fileInput"
              name="chatImg"
              style="display: none"
              accept="image/*"
            />
            <div id="imgOfPreview">
              <div style="display: none" class="invalid-feedback" id="imageNot">
                Please Select Image File!
                <i class="fa-solid fa-xmark"></i>
              </div>
            </div>
          </div>
          <div id="previewBottom"></div>
        </form>
        <div id="progressBar">
          <div class="BarColor">Loading...</div>
        </div>
      </center>
      <%}%> <% } %> <% }else{ %>
      <div class="chatUser">
        <!-- userimage -->
        <div class="newInfo">
          <h6>Select a Chat</h6>
        </div>
        <div class="homeBtn">
          <a style="text-decoration: none; color: black" href="/"
            ><button class="btn btn-warning">Back To Home</button></a
          >
        </div>
      </div>
      <% }%> <%if(chatUser){ %>
      <div class="typeMsg">
        <form
          id="msgSendForm"
          method="post"
          action="/saveMsg/<%=chatUser._id %>"
          style="width: 100%"
          novalidate
          class="needs-validation"
        >
          <div class="sendMsgOptions">
            <div class="inpOutr" style="height: fit-content">
              <input
                class="form-control msgInp"
                type="text"
                name="msg"
                placeholder="Enter Message"
                required
                id="sentMsg"
              />
            </div>
            <div>
              <label for="fileInput">
                <!-- Your icon or text for triggering file selection -->
                <div class="icon">
                  <i style="font-size: x-large" class="fa-regular fa-image"></i>
                </div>
              </label>
            </div>
            <div class="subBtn">
              <button
                type="submit"
                style="
                  text-decoration: none;
                  background-color: aqua;
                  border: none;
                "
              >
                <i
                  style="font-size: x-large"
                  class="sendBtn fa-regular fa-paper-plane"
                ></i>
              </button>
            </div>
          </div>
        </form>
      </div>
      <% } %>
    </div>
  </div>

  <script>
    const socket = io("/user_namespace", {
      auth: {
        token: "<%= currUser._id %>",
      },
    });
    socket.on("userOnline", (data) => {
      document
        .getElementById(`${data.user_id}`)
        .classList.remove("chat-offline");
      document.getElementById(`${data.user_id}`).classList.add("chat-online");
      document.getElementById(`${data.user_id}-text`).innerText = "Online";

      document
        .getElementById(`${data.user_id}-usersArray`)
        .classList.remove("offline-indicator");
      document
        .getElementById(`${data.user_id}-usersArray`)
        .classList.add("online-indicator");

      document
        .getElementById(`${data.user_id}-chatUser`)
        .classList.remove("offline-indicator");
      document
        .getElementById(`${data.user_id}-chatUser`)
        .classList.add("online-indicator");
    });
    socket.on("userOffline", (data) => {
      document.getElementById(`${data.user_id}`).classList.add("chat-offline");
      document
        .getElementById(`${data.user_id}`)
        .classList.remove("chat-online");
      document.getElementById(`${data.user_id}-text`).innerText = "offline";
      document
        .getElementById(`${data.user_id}-usersArray`)
        .classList.add("offline-indicator");
      document
        .getElementById(`${data.user_id}-usersArray`)
        .classList.remove("online-indicator");

      document
        .getElementById(`${data.user_id}-chatUser`)
        .classList.add("offline-indicator");
      document
        .getElementById(`${data.user_id}-chatUser`)
        .classList.remove("online-indicator");
    });

    //when user sends the msg

    let msgSendForm = document.getElementById("msgSendForm");

    //when user sends the msg
    msgSendForm.addEventListener("submit", (e) => {
      e.preventDefault();
      let msg = $("#sentMsg").val();
      if (msg) {
        $.ajax({
          url: "/saveMsg/<%=chatUser._id %>",
          type: "post",
          data: { msg: msg },
          success: (data) => {
            $("#sentMsg").val("");
            let chat = data.msg;
            let time = data.createdAt;
            let data_img = data._img;
            let data_id = data._id;
            let currUser_id = "<%= currUser._id %>";
            let chatUser_id = "<%= chatUser._id %>";
            let msgType = "sendMsg";

            let msg_id = data_id;
            let isDeleted = false;
            let isImage = false;
            let imgURL = data_img;
            let LrgCreatedAt = luxon.DateTime.fromJSDate(
              new Date(data.createdAt),
              {
                zone: "Asia/Kolkata",
              }
            ).toLocaleString({
              weekday: "short",
              month: "short",
              day: "numeric",
              year: "numeric",
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              hour12: true,
            });

            let SmlCreatedAt = luxon.DateTime.fromJSDate(
              new Date(data.createdAt),
              {
                zone: "Asia/Kolkata",
              }
            ).toLocaleString({
              day: "numeric",
              month: "numeric",
              year: "numeric",
              hour: "numeric",
              minute: "numeric",
              hour12: true,
            });

            let html =
              `
          <div class="sendMsg" id=${msg_id}>
          <% if(chatUser_id.toString() === currUser_id.toString()){ %>
            <div
            class="sendInnerMsg" style="background-color:white;"
          >
            <p style="margin-bottom:0">` +
              chat +
              `</p>
          </div>
          <% } else{%>
            <div
            class="sendInnerMsg"
          >
            <p style="margin-bottom:0">` +
              chat +
              `</p>
          </div>
            <%}%>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
          <p
            id="dateLarge"
            class="date-format-large"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
            ` +
              LrgCreatedAt +
              `
          </p>
          <p
            id="dateSmall"
            class="date-format-small"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
          ` +
              SmlCreatedAt +
              `
          </p>
            <!-- Ellipsis icon --> 
            <div class="Eicon" onclick="openDelBTN('${msg_id}-icon')" style="width: 10%; text-align: center">
              <i class="fa-solid fa-caret-down"></i>
            </div>
        </div>
          <div  class="deleteBtn" id=${msg_id}-icon>

            <button
              onclick="openDelCnf(
                '` +
              currUser_id +
              `','` +
              chatUser_id +
              `',` +
              time +
              `,'` +
              msgType +
              `','` +
              msg_id +
              `','` +
              isDeleted +
              `','` +
              isImage +
              `','` +
              imgURL +
              `'
              )"
            >
              Delete
            </button>
        </div>`;
            $(".messages").append(html);
            scrollChat();

            // let noti = new Notification(`New Msg from : ${currUser_id}`, {
            //   body: chat,
            // });

            socket.emit("msgSent", {
              sendUser: "<%=currUser._id%>",
              recUser: "<%=chatUser._id%>",
              msg: chat,
              createdAt: data.createdAt,
              time,
              data_img,
              data_id,
              msgType,
              msg_id,
              imgURL,
            });

            var successMessage = document.getElementById("manualflashSuccess");
            successMessage.append("Message Sent 😀");
            showAndHide(successMessage);
            /* var errMsg = document.getElementById("manualflashError");
            errMsg.append("You Cannot send Video's as of now");
            showAndHide(errMsg); */

            let innerText = `Last Msg: ${LrgCreatedAt}`;
            $("#<%=chatUser._id%>-latestMsg").empty();
            $("#<%=chatUser._id%>-latestMsg").append(innerText);
          },
        });
      }
    });

    function openDelBTN(msg_id) {
      document.getElementById(`${msg_id}`).style.display === "none"
        ? (document.getElementById(`${msg_id}`).style.display = "block")
        : (document.getElementById(`${msg_id}`).style.display = "none");
    }

    function openDelCnf(
      currUser_id,
      chatUser_id,
      msgTime,
      msgType,
      msgId,
      isDeleted,
      isImage,
      imgURL
    ) {
      let imgURLarray = imgURL.split("/");
      let imgURLName = imgURLarray[imgURLarray.length - 1].split(".");
      let imgURLL = imgURLName[0];

      let time = document.getElementById("time");
      let cnfForm = document.getElementById("cnfForm");

      let msg_id = document.getElementById("msg_id");
      let msg_type = document.getElementById("msg_type");
      let isImg = document.getElementById("isImg");
      let img_URL = document.getElementById("imgURL");

      msg_id.innerHTML = `${msgId}`;
      msg_type.innerHTML = `${msgType}`;
      isImg.innerHTML = `${isImage}`;
      img_URL.innerHTML = `${imgURLL}`;

      /*  cnfForm.action = `/deleteMsg/${currUser._id}/${chatUser._id}/${msgType}`; */

      time.innerHTML = luxon.DateTime.fromJSDate(new Date(msgTime), {
        zone: "Asia/Kolkata",
      }).toLocaleString({
        weekday: "short",
        month: "short",
        day: "numeric",
        year: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        hour12: true,
      });
      var delForE = document.getElementById("delForE");
      //always code to disable should be  before then code to hide/unhide delE
      if (isDeleted === "true") {
        delForE.disabled = true;
        delForE.style.backgroundColor = "rgb(215, 213, 213)";
        delForE.style.color = "black";
      } else {
        delForE.disabled = false;
        delForE.style = ""; // Reset to the default style
      }
      if (msgType === "recMsg") {
        delForE.style.display = "none";
      } else {
        delForE.style.display = "block";
        delForE.style.display = "inline"; // Change display to "inline" for span
      }

      document.getElementById("delCnfOverlay").style.display = "flex";
    }

    //to display recieved msg
    socket.on("receiveMsg", (data) => {
      let time = data.createdAt;
      let data_img = data.data_img;
      let data_id = data.data_id;
      let currUser_id = "<%= currUser._id %>";
      let chatUser_id = "<%= chatUser._id %>";
      let msgType = "recMsg";

      let msg_id = data.msg_id;
      let isDeleted = false;
      let isImage = false;
      let imgURL = data.imgURL;
      if (
        data.recUser === "<%=currUser._id%>" &&
        data.sendUser === "<%=chatUser._id%>" &&
        data.recUser !== data.sendUser
      ) {
        let chat = data.msg;
        let LrgCreatedAt = luxon.DateTime.fromJSDate(new Date(data.createdAt), {
          zone: "Asia/Kolkata",
        }).toLocaleString({
          weekday: "short",
          month: "short",
          day: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          hour12: true,
        });

        let SmlCreatedAt = luxon.DateTime.fromJSDate(new Date(data.createdAt), {
          zone: "Asia/Kolkata",
        }).toLocaleString({
          day: "numeric",
          month: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "numeric",
          hour12: true,
        });

        let html =
          `
        <div class="recMsg" id=${msg_id}>
          <div
            class="recInnerMsg"
          >
            <p style="margin-bottom:0">` +
          chat +
          `</p>
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
          <p
            id="dateLarge"
            class="date-format-large"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
            ` +
          LrgCreatedAt +
          `
          </p>
          <p
            id="dateSmall"
            class="date-format-small"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
          ` +
          SmlCreatedAt +
          `
          </p>
            <!-- Ellipsis icon -->
            <div class="Eicon" onclick="openDelBTN('${msg_id}-icon')" style="width: 10%; text-align: center">
              <i class="fa-solid fa-caret-down"></i>
            </div>
        </div>
          <div  class="deleteBtn" id=${msg_id}-icon>

            <button
              onclick="openDelCnf(
                '` +
          currUser_id +
          `','` +
          chatUser_id +
          `',` +
          time +
          `,'` +
          msgType +
          `','` +
          msg_id +
          `','` +
          isDeleted +
          `','` +
          isImage +
          `','` +
          imgURL +
          `'
              )"
            >
              Delete
            </button>
        </div>`;
        $(".messages").append(html);
        scrollChat();
        /*  appendRecMsg(html); */

        let innerText = `Last Msg: ${LrgCreatedAt}`;
        $("#<%=chatUser._id%>-latestMsg").empty();
        $("#<%=chatUser._id%>-latestMsg").append(innerText);
      }
    });

    let imgSentForm = document.getElementById("priviewForm");
    let progressBar = document.getElementById("progressBar");

    //when user sends the img
    imgSentForm.addEventListener("submit", (e) => {
      e.preventDefault();

      let imgInput = document.getElementById("fileInput");
      let imgFile = imgInput.files[0];

      document.getElementById("ImgSendBtn").disabled = true;
      document.getElementById("ImgSendInp").disabled = true;
      progressBar.style.display = "block";

      if (imgFile) {
        let formData = new FormData();
        formData.append("chatImg", imgFile);
        $.ajax({
          url: "/saveImg/<%=chatUser._id %>",
          type: "post",
          data: formData, // Pass FormData object directly as data
          contentType: false,
          processData: false, // Ensure these options are set to false for FormData
          success: (data) => {
            imgInput.value = ""; // Clear the input field after sending
            let imgSrc = data.img;

            let time = data.createdAt;
            let currUser_id = "<%= currUser._id %>";
            let chatUser_id = "<%= chatUser._id %>";
            let msgType = "sendMsg";

            let msg_id = data._id;
            let isDeleted = false;
            let isImage = true;
            let imgURL = data.img;

            document.getElementById("previewBottom").style.display = "none";
            document.getElementById("imagePreview").style.display = "none";

            let LrgCreatedAt = luxon.DateTime.fromJSDate(
              new Date(data.createdAt),
              {
                zone: "Asia/Kolkata",
              }
            ).toLocaleString({
              weekday: "short",
              month: "short",
              day: "numeric",
              year: "numeric",
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              hour12: true,
            });

            let SmlCreatedAt = luxon.DateTime.fromJSDate(
              new Date(data.createdAt),
              {
                zone: "Asia/Kolkata",
              }
            ).toLocaleString({
              day: "numeric",
              month: "numeric",
              year: "numeric",
              hour: "numeric",
              minute: "numeric",
              hour12: true,
            });

            let html =
              `
          <div class="sendMsg" id=${msg_id}>
          <div
            class="sendInnerMsg"
          >
          <img src=` +
              imgSrc +
              ` alt="" />
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
          <p
            id="dateLarge"
            class="date-format-large"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
            ` +
              LrgCreatedAt +
              `
          </p>
          <p
            id="dateSmall"
            class="date-format-small"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
          ` +
              SmlCreatedAt +
              `
          </p>
            <!-- Ellipsis icon -->
            <div class="Eicon" onclick="openDelBTN('${msg_id}-icon')" style="width: 10%; text-align: center">
              <i class="fa-solid fa-caret-down"></i>
            </div>
        </div>
          <div  class="deleteBtn" id=${msg_id}-icon>

            <button
              onclick="openDelCnf(
                '` +
              currUser_id +
              `','` +
              chatUser_id +
              `',` +
              time +
              `,'` +
              msgType +
              `','` +
              msg_id +
              `','` +
              isDeleted +
              `','` +
              isImage +
              `','` +
              imgURL +
              `'
              )"
            >
              Delete
            </button>
        </div>`;
            progressBar.style.display = "none";
            document.getElementById("ImgSendBtn").disabled = false;
            document.getElementById("ImgSendInp").disabled = false;
            $("#imgOfPreview").empty();
            $("#previewBottom").empty();
            $(".messages").append(html);
            scrollChat();
            socket.emit("imgSent", {
              sendUser: "<%=currUser._id%>",
              recUser: "<%=chatUser._id%>",
              img: imgSrc,
              createdAt: data.createdAt,
              msg_id,
            });

            var successMessage = document.getElementById("manualflashSuccess");
            successMessage.append("Image Sent 😀");
            showAndHide(successMessage);

            let innerText = `Last Msg: ${LrgCreatedAt}`;
            $("#<%=chatUser._id%>-latestMsg").empty();
            $("#<%=chatUser._id%>-latestMsg").append(innerText);
          },
          error: (xhr, status, error) => {
            var errMsg = document.getElementById("manualflashError");
            errMsg.append("Error sending image:", error);
            showAndHide(errMsg);
            console.error("Error sending image:", error);
            // Handle the error, show a message to the user, etc.
          },
        });
      } else {
        // Handle case where no image is selected
        var errMsg = document.getElementById("manualflashError");
        errMsg.append("No image selected");
        showAndHide(errMsg);
      }
    });

    //to display rec img
    socket.on("receiveImg", (data) => {
      let time = data.createdAt;
      let currUser_id = "<%= currUser._id %>";
      let chatUser_id = "<%= chatUser._id %>";
      let msgType = "recMsg";

      let msg_id = data.msg_id;
      let isDeleted = false;
      let isImage = true;
      let imgURL = data.img;
      if (
        data.recUser === "<%=currUser._id%>" &&
        data.sendUser === "<%=chatUser._id%>" &&
        data.recUser !== data.sendUser
      ) {
        let imgSrc = data.img;
        let LrgCreatedAt = luxon.DateTime.fromJSDate(new Date(data.createdAt), {
          zone: "Asia/Kolkata",
        }).toLocaleString({
          weekday: "short",
          month: "short",
          day: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          hour12: true,
        });

        let SmlCreatedAt = luxon.DateTime.fromJSDate(new Date(data.createdAt), {
          zone: "Asia/Kolkata",
        }).toLocaleString({
          day: "numeric",
          month: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "numeric",
          hour12: true,
        });
        let html =
          `
        <div class="recMsg" id=${msg_id}>
          <div
            class="recInnerMsg"
          >
          <img src=` +
          imgSrc +
          ` alt="" />
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
          <p
            id="dateLarge"
            class="date-format-large"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
            ` +
          LrgCreatedAt +
          `
          </p>
          <p
            id="dateSmall"
            class="date-format-small"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
          ` +
          SmlCreatedAt +
          `
          </p>
            <!-- Ellipsis icon -->
            <div class="Eicon" onclick="openDelBTN('${msg_id}-icon')" style="width: 10%; text-align: center">
              <i class="fa-solid fa-caret-down"></i>
            </div>
        </div>
          <div  class="deleteBtn" id=${msg_id}-icon>

            <button
              onclick="openDelCnf(
                '` +
          currUser_id +
          `','` +
          chatUser_id +
          `',` +
          time +
          `,'` +
          msgType +
          `','` +
          msg_id +
          `','` +
          isDeleted +
          `','` +
          isImage +
          `','` +
          imgURL +
          `'
              )"
            >
              Delete
            </button>
        </div>`;
        $(".messages").append(html);
        scrollChat();
        /*  appendRecMsg(html); */

        let innerText = `Last Msg: ${LrgCreatedAt}`;
        $("#<%=chatUser._id%>-latestMsg").empty();
        $("#<%=chatUser._id%>-latestMsg").append(innerText);
      }
    });

    socket.on("recDelete", (data) => {
      let data_msgId = data.msgId.toString();

      if (
        data.chatUser_id === "<%=currUser._id%>" &&
        data.currUser_id === "<%=chatUser._id%>"
      ) {
        let msg;
        for (Emsg of data.currentUser.sendMsgs) {
          if (Emsg._id.toString() === data_msgId) {
            msg = Emsg;
          }
        }
        if (!msg) {
          for (Emsg of data.currentUser.sendImgs) {
            if (Emsg._id.toString() === data_msgId) {
              msg = Emsg;
            }
          }
        }

        if (!msg) {
          for (Emsg of data.currentUser.recMsgs) {
            if (Emsg._id.toString() === data_msgId) {
              msg = Emsg;
            }
          }
        }
        if (!msg) {
          for (Emsg of data.currentUser.recImgs) {
            if (Emsg._id.toString() === data_msgId) {
              msg = Emsg;
            }
          }
        }

        let currUser_id = "<%= currUser._id %>";
        let chatUser_id = "<%= chatUser._id %>";
        let LrgCreatedAt;
        let msgType = "recMsg";
        let SmlCreatedAt;
        let msg_id = data.msgId;
        let isDeleted = true;
        let isImage = data.is_img;

        let imgURL = data.imgURL;
        let time;

        time = msg.createdAt;

        LrgCreatedAt = luxon.DateTime.fromJSDate(new Date(msg.createdAt), {
          zone: "Asia/Kolkata",
        }).toLocaleString({
          weekday: "short",
          month: "short",
          day: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "numeric",
          second: "numeric",
          hour12: true,
        });

        SmlCreatedAt = luxon.DateTime.fromJSDate(new Date(msg.createdAt), {
          zone: "Asia/Kolkata",
        }).toLocaleString({
          day: "numeric",
          month: "numeric",
          year: "numeric",
          hour: "numeric",
          minute: "numeric",
          hour12: true,
        });

        let html =
          `<div class="recInnerMsg" style="background-color: rgb(215, 213, 213)">
            <p style="margin-bottom: 0">
              <i class="fa-regular fa-circle-xmark"></i> This Message Was
              Deleted
            </p>
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
          <p
            id="dateLarge"
            class="date-format-large"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
            ` +
          LrgCreatedAt +
          `
          </p>
          <p
            id="dateSmall"
            class="date-format-small"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
          ` +
          SmlCreatedAt +
          `
          </p>
            <!-- Ellipsis icon -->
            <div class="Eicon" onclick="openDelBTN('${msg_id}-icon')" style="width: 10%; text-align: center">
              <i class="fa-solid fa-caret-down"></i>
            </div>
        </div>
          <div  class="deleteBtn" id=${msg_id}-icon>

            <button
              onclick="openDelCnf(
                '` +
          currUser_id +
          `','` +
          chatUser_id +
          `','` +
          time +
          `','` +
          msgType +
          `','` +
          msg_id +
          `','` +
          isDeleted +
          `','` +
          isImage +
          `','` +
          imgURL +
          `'
              )"
            >
              Delete
            </button>
        </div>`;

        $(`#${msg._id}`).empty();
        $(`#${msg._id}`).append(html);
      }
    });

    function scrollChat() {
      $(".messages").animate(
        {
          scrollTop:
            $(".messages").offset().top + $(".messages")[0].scrollHeight,
        },
        0
      );
    }

    //(Not Working)append msg and Play audio
    function appendRecMsg(html) {
      $(".messages").append(html);
      scrollChat();
      /* // Play notification sound
      var audio = new Audio("notification.mp3");
      audio.play(); */
    }
  </script>

  <script>
    function openDelBTN(msg_id) {
      document.getElementById(`${msg_id}`).style.display === "none"
        ? (document.getElementById(`${msg_id}`).style.display = "block")
        : (document.getElementById(`${msg_id}`).style.display = "none");
    }
    let chatOptions = document.getElementById("chatOptions");
    chatOptions.addEventListener("mouseleave", () => {
      chatOptions.style.display = "none";
    });
    function openChatOpt() {
      chatOptions.style.display === "block"
        ? (chatOptions.style.display = "none")
        : (chatOptions.style.display = "block");
    }

    let deleteMsgsForm = document.getElementById("deleteMsgsForm");

    deleteMsgsForm.addEventListener("submit", function (e) {
      let html = ``;
      e.preventDefault();
      $.ajax({
        url: "/deleteAllMsgs/<%=currUser._id %>/<%= chatUser._id %>",
        type: "get",
        success: () => {
          $(".messages").empty();
          let innerText = `Last Msg: No messages`;
          $("#<%=chatUser._id%>-latestMsg").empty();
          $("#<%=chatUser._id%>-latestMsg").append(innerText);
        },
      });
    });

    function submitDelBtn(currUser_id, chatUser_id, delType) {
      let msg_id = document.getElementById("msg_id");
      let msg_type = document.getElementById("msg_type");
      let isImg = document.getElementById("isImg");
      let img_URL = document.getElementById("imgURL");

      let msgId = msg_id.innerHTML;
      let msgType = msg_type.innerHTML;
      let is_img = isImg.innerHTML;
      let imgURL = img_URL.innerHTML;

      if (is_img !== "true") {
        is_img = "false";
      }
      if (!imgURL) {
        imgURL = "noURL";
      }

      const elements = document.getElementsByClassName("delBtn");
      for (let i = 0; i < elements.length; i++) {
        elements[i].disabled = true; // Set disabled property to true
        elements[i].style.backgroundColor = "rgb(215, 213, 213)";
        elements[i].style.color = "black";
      }
      /* cnfForm.action = `/deleteMsg/${currUser_id}/${chatUser_id}/${msgType}/${msgId}/${delType}/${is_img}/${imgURL}`;
      cnfForm.submit(); */
      $.ajax({
        url: `/deleteMsg/${currUser_id}/${chatUser_id}/${msgType}/${msgId}/${delType}/${is_img}/${imgURL}`,

        type: "get",
        success: (data) => {
          let sendObj = {
            currUser_id: "<%= currUser._id %>",
            chatUser_id: "<%= chatUser._id %>",
            msgType,
            msgId,
            delType,
            is_img,
            imgURL,
          };
          let msg;
          let IS_Img = false;

          for (Emsg of data.currUser.sendMsgs) {
            if (Emsg._id.toString() === msgId.toString()) {
              msg = Emsg;
            }
          }
          if (!msg) {
            for (Emsg of data.currUser.sendImgs) {
              if (Emsg._id.toString() === msgId.toString()) {
                msg = Emsg;
                IS_Img = true;
              }
            }
          }

          if (!msg) {
            for (Emsg of data.currUser.recMsgs) {
              if (Emsg._id.toString() === msgId.toString()) {
                msg = Emsg;
              }
            }
          }
          if (!msg) {
            for (Emsg of data.currUser.recImgs) {
              if (Emsg._id.toString() === msgId.toString()) {
                msg = Emsg;
                IS_Img = true;
              }
            }
          }

          let LrgCreatedAt;
          let SmlCreatedAt;
          let msg_id = msgId;
          let isDeleted = true;
          let isImage = IS_Img;
          let time;
          if (msg) {
            time = msg.createdAt;

            LrgCreatedAt = luxon.DateTime.fromJSDate(new Date(msg.createdAt), {
              zone: "Asia/Kolkata",
            }).toLocaleString({
              weekday: "short",
              month: "short",
              day: "numeric",
              year: "numeric",
              hour: "numeric",
              minute: "numeric",
              second: "numeric",
              hour12: true,
            });

            SmlCreatedAt = luxon.DateTime.fromJSDate(new Date(msg.createdAt), {
              zone: "Asia/Kolkata",
            }).toLocaleString({
              day: "numeric",
              month: "numeric",
              year: "numeric",
              hour: "numeric",
              minute: "numeric",
              hour12: true,
            });
          }

          if (!msg) {
            $(`#${msg_id}`).remove();
            let allMsgs = [];

            let currentUser = data.currUser;
            let chatUser = data.chatUser;
            let prevLatestTime;
            if (currentUser && currentUser.sendMsgs.length > 0) {
              for (msg of currentUser.sendMsgs) {
                if (msg.sendUser.toString() === chatUser._id.toString()) {
                  allMsgs.push(msg);
                }
              }
            }

            if (currentUser && currentUser.recMsgs.length > 0) {
              for (msg of currentUser.recMsgs) {
                if (msg.recUser.toString() === chatUser._id.toString()) {
                  allMsgs.push(msg);
                }
              }
            }
            //storing all sendImgs
            if (currentUser && currentUser.sendImgs.length > 0) {
              for (img of currentUser.sendImgs) {
                if (img.sendUser.toString() === chatUser._id.toString()) {
                  allMsgs.push(img);
                }
              }
            }

            //storing all recImgs
            if (currentUser && currentUser.recImgs.length > 0) {
              for (img of currentUser.recImgs) {
                if (img.recUser.toString() === chatUser._id.toString()) {
                  allMsgs.push(img);
                }
              }
            }

            if (allMsgs.length > 0) {
              const latestMsg = allMsgs.reduce((prevMsg, currentMsg) =>
                new Date(currentMsg.createdAt) > new Date(prevMsg.createdAt)
                  ? currentMsg
                  : prevMsg
              );
              prevLatestTime = latestMsg.createdAt;
            } else {
              // No messages for this user, remove latestMsg value
              prevLatestTime = undefined;
            }

            if (prevLatestTime) {
              prevLatestTime = luxon.DateTime.fromJSDate(
                new Date(prevLatestTime),
                {
                  zone: "Asia/Kolkata",
                }
              ).toLocaleString({
                weekday: "short",
                month: "short",
                day: "numeric",
                year: "numeric",
                hour: "numeric",
                minute: "numeric",
                second: "numeric",
                hour12: true,
              });
              let innerText = `Last Msg: ${prevLatestTime}`;
              $("#<%=chatUser._id%>-latestMsg").empty();
              $("#<%=chatUser._id%>-latestMsg").append(innerText);
            } else {
              let innerText = `Last Msg: No messages`;
              $("#<%=chatUser._id%>-latestMsg").empty();
              $("#<%=chatUser._id%>-latestMsg").append(innerText);
            }
            document.getElementById("delCnfOverlay").style.display = "none";
            //to reEnable the delOverlay btns
            const elements = document.getElementsByClassName("delBtn");
            for (let i = 0; i < elements.length; i++) {
              elements[i].disabled = false; // Set disabled property to true
              elements[i].style = "";
            }
          } else {
            let html =
              `<div class="recInnerMsg" style="background-color: rgb(215, 213, 213)">
            <p style="margin-bottom: 0">
              <i class="fa-regular fa-circle-xmark"></i> This Message Was
              Deleted
            </p>
          </div>
          <div
            style="
              display: flex;
              justify-content: space-between;
              padding-right: 0.2rem;
              align-items: center;
            "
          >
          <p
            id="dateLarge"
            class="date-format-large"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
            ` +
              LrgCreatedAt +
              `
          </p>
          <p
            id="dateSmall"
            class="date-format-small"
            style="font-size: smaller; margin-left: 0.5rem; margin-bottom: 0"
          >
          ` +
              SmlCreatedAt +
              `
          </p>
            <!-- Ellipsis icon -->
            <div class="Eicon" onclick="openDelBTN('${msg_id}-icon')" style="width: 10%; text-align: center">
              <i class="fa-solid fa-caret-down"></i>
            </div>
        </div>
          <div  class="deleteBtn" id=${msg_id}-icon>

            <button
              onclick="openDelCnf(
                '` +
              currUser_id +
              `','` +
              chatUser_id +
              `','` +
              time +
              `','` +
              msgType +
              `','` +
              msg_id +
              `','` +
              isDeleted +
              `','` +
              isImage +
              `','` +
              imgURL +
              `'
              )"
            >
              Delete
            </button>
        </div>`;

            $(`#${msg._id}`).empty();
            $(`#${msg._id}`).append(html);

            document.getElementById("delCnfOverlay").style.display = "none";
            //to reEnable the delOverlay btns
            const elements = document.getElementsByClassName("delBtn");
            for (let i = 0; i < elements.length; i++) {
              elements[i].disabled = false; // Set disabled property to true
              elements[i].style = "";
            }
            /* socket.emit("sendDelete", sendObj); */
            if (currUser_id !== chatUser_id && delType === "delTypeE") {
              socket.emit("sendDelete", sendObj);
            }
          }
        },
      });
    }

    function openDelCnf(
      currUser_id,
      chatUser_id,
      msgTime,
      msgType,
      msgId,
      isDeleted,
      isImage,
      imgURL
    ) {
      let imgURLarray = imgURL.split("/");
      let imgURLName = imgURLarray[imgURLarray.length - 1].split(".");
      let imgURLL = imgURLName[0];

      let time = document.getElementById("time");
      let cnfForm = document.getElementById("cnfForm");

      let msg_id = document.getElementById("msg_id");
      let msg_type = document.getElementById("msg_type");
      let isImg = document.getElementById("isImg");
      let img_URL = document.getElementById("imgURL");

      msg_id.innerHTML = `${msgId}`;
      msg_type.innerHTML = `${msgType}`;
      isImg.innerHTML = `${isImage}`;
      img_URL.innerHTML = `${imgURLL}`;

      /*  cnfForm.action = `/deleteMsg/${currUser._id}/${chatUser._id}/${msgType}`; */

      time.innerHTML = luxon.DateTime.fromJSDate(new Date(msgTime), {
        zone: "Asia/Kolkata",
      }).toLocaleString({
        weekday: "short",
        month: "short",
        day: "numeric",
        year: "numeric",
        hour: "numeric",
        minute: "numeric",
        second: "numeric",
        hour12: true,
      });
      var delForE = document.getElementById("delForE");
      //always code to disable should be  before then code to hide/unhide delE
      if (isDeleted === "true") {
        delForE.disabled = true;
        delForE.style.backgroundColor = "rgb(215, 213, 213)";
        delForE.style.color = "black";
      } else {
        delForE.disabled = false;
        delForE.style = ""; // Reset to the default style
      }
      if (msgType === "recMsg") {
        delForE.style.display = "none";
      } else {
        delForE.style.display = "block";
        delForE.style.display = "inline"; // Change display to "inline" for span
      }

      document.getElementById("delCnfOverlay").style.display = "flex";
    }

    function closeDelCnf() {
      document.getElementById("delCnfOverlay").style.display = "none";
    }

    document.addEventListener("DOMContentLoaded", function () {
      // Get the element by its ID
      var defaultSection = document.getElementById("defaultSection");

      // Scroll to the element if it exists
      if (defaultSection) {
        defaultSection.scrollIntoView();
      }
    }); // Get references to the input and preview elements
    const fileInput = document.getElementById("fileInput");
    const imgOfPreview = document.getElementById("imgOfPreview");
    const imagePreview = document.getElementById("imagePreview");
    const form = document.getElementById("priviewForm");
    const previewBottom = document.getElementById("previewBottom");

    previewBottom.style = "margin-bottom: 0.5rem";

    // Create the send button outside of the handleFileSelect function
    const btn = document.createElement("button");
    btn.classList.add("btn", "btn-success");
    btn.innerHTML = "Send";
    btn.style = "margin-left: 0.5rem";
    btn.type = "submit";
    btn.id = "ImgSendBtn";

    const inp = document.createElement("input");
    inp.type = "text";
    inp.placeholder = "Enter Captions";
    inp.style = "width:60%; border-radius:1rem; text-align:center ";
    inp.name = "caption";
    inp.id = "ImgSendInp";

    // Add an event listener to the input
    fileInput.addEventListener("change", handleFileSelect);

    // Function to handle file selection
    function handleFileSelect() {
      // Get the selected file from the input
      const file = fileInput.files[0];
      if (!file || !file.type.startsWith("image/")) {
        document.getElementById("imageNot").style.display = "block";
        return;
      }
      // Check if a file is selected
      if (file) {
        document.getElementById("imageNot").style.display = "none";
        // Create a FileReader object to read the file
        const reader = new FileReader();

        // Set up the FileReader to display the image when it's loaded
        reader.onload = function (e) {
          // Create an image element
          const img = document.createElement("img");

          // Set the source of the image to the loaded data URL
          img.src = e.target.result;

          imgOfPreview.appendChild(img);
          previewBottom.appendChild(inp);
          previewBottom.appendChild(btn);
          // Re-display the preview divs if needed
          imagePreview.style.display = "block";
          document.getElementById("imgOfPreview").style.display = "block";
          document.getElementById("previewBottom").style.display = "block";
        };

        // Read the file as a data URL
        reader.readAsDataURL(file);
      } else {
        // If no file is selected, clear the preview
      }
    }

    function showAndHide(element) {
      element.style.opacity = "1"; // Ensure initial opacity is set
      element.style.display = "block";

      setTimeout(function () {
        element.style.opacity = "0";
        setTimeout(function () {
          element.style.display = "none";
        }, 1000);
      }, 3000);
    }
  </script>
</body>
